  PARA VEHICULOS
  select 
    v.id, v3.image as logo, v.name as name, b.name as brand, b2.name as model,
    v2.name as vtype, v.plate as plate, v.status as status
    from vehicles v
    inner join brands b on v.brand_id = b.id
    inner join brandmodels b2 on v.model_id = b2.id
    inner join vehicletypes v2 on v.type_id = v2.id
    left join vehicleimages v3 on (v.id = v3.vehicle_id and v3.profile=1);


CREATE OR REPLACE FUNCTION sp_zones(_operacion int, _id int)
    RETURNS TABLE(id bigint, name varchar, area double precision, 
                  sector varchar, description text) 
AS 
$$
BEGIN
    IF _operacion = 1 THEN
        RETURN QUERY
        SELECT z.id AS id, z.name AS name, z.area AS area, 
               s.name AS sector, z.description AS description
        FROM zones z
        INNER JOIN sectors s ON z.sector_id = s.id;
    ELSIF _operacion = 2 THEN
        RETURN QUERY
        SELECT z.id AS id, z.name AS name, z.area AS area, 
               s.name AS sector, z.description AS description
        FROM zones z
        INNER JOIN sectors s ON z.sector_id = s.id
        WHERE z.id = _id;
    END IF;
END;
$$
LANGUAGE plpgsql;


SELECT * FROM sp_zones(1,1)


CREATE OR REPLACE FUNCTION sp_sectors(_id int)
    RETURNS TABLE(zone varchar, latitude double precision, longitude double precision) 
AS 
$$
BEGIN
	RETURN QUERY
    SELECT z.name as zone, z2.latitude, z2.longitude
	from zones z
	inner join zonecoords z2 on z.id = z2.zone_id
	where z.sector_id=_id;
END;
$$
LANGUAGE plpgsql;

SELECT * FROM sp_sectors(1)



CREATE OR REPLACE FUNCTION sp_zonecoords()
    RETURNS TABLE(sector varchar, zone varchar, latitude double precision, longitude double precision) 
AS 
$$
BEGIN
	RETURN QUERY
    SELECT s.name as sector,z.name as zone, zc.latitude as latitude, zc.longitude as longitude
	FROM zones z
	INNER JOIN zonecoords zc ON z.id = zc.zone_id
	INNER JOIN sectors s ON z.sector_id = s.id ;
END;
$$
LANGUAGE plpgsql;

SELECT * FROM sp_zonecoords();




CREATE OR REPLACE FUNCTION sp_vehicleroutes()
    RETURNS TABLE(id bigint, date_route date, time_route time, vehicle varchar, 
				  route varchar, time_start time, time_end time, description text) 
AS 
$$
BEGIN
	RETURN QUERY
    SELECT vr.id as id, vr.date_route as date_route, vr.time_route as time_route,
	v.name as vehicle, r.name as route, s.time_start as time_start, s.time_end as time_end,
	vr.description as description
	FROM vehicleroutes vr
	INNER JOIN vehicles v ON vr.vehicle_id = v.id
	INNER JOIN routes r ON vr.route_id = r.id
	INNER JOIN schedules s ON vr.schedule_id = s.id;
END;
$$
LANGUAGE plpgsql;

SELECT * FROM sp_vehicleroutes();


