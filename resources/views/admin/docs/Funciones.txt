  PARA VEHICULOS
  select 
    v.id, v3.image as logo, v.name as name, b.name as brand, b2.name as model,
    v2.name as vtype, v.plate as plate, v.status as status
    from vehicles v
    inner join brands b on v.brand_id = b.id
    inner join brandmodels b2 on v.model_id = b2.id
    inner join vehicletypes v2 on v.type_id = v2.id
    left join vehicleimages v3 on (v.id = v3.vehicle_id and v3.profile=1);


CREATE OR REPLACE FUNCTION sp_zones(_operacion int, _id int)
    RETURNS TABLE(id bigint, name varchar, area double precision, 
                  sector varchar, description text) 
AS 
$$
BEGIN
    IF _operacion = 1 THEN
        RETURN QUERY
        SELECT z.id AS id, z.name AS name, z.area AS area, 
               s.name AS sector, z.description AS description
        FROM zones z
        INNER JOIN sectors s ON z.sector_id = s.id;
    ELSIF _operacion = 2 THEN
        RETURN QUERY
        SELECT z.id AS id, z.name AS name, z.area AS area, 
               s.name AS sector, z.description AS description
        FROM zones z
        INNER JOIN sectors s ON z.sector_id = s.id
        WHERE z.id = _id;
    END IF;
END;
$$
LANGUAGE plpgsql;


SELECT * FROM sp_zones(1,1)


CREATE OR REPLACE FUNCTION sp_sectors(_id int)
    RETURNS TABLE(zone varchar, latitude double precision, longitude double precision) 
AS 
$$
BEGIN
	RETURN QUERY
    SELECT z.name as zone, z2.latitude, z2.longitude
	from zones z
	inner join zonecoords z2 on z.id = z2.zone_id
	where z.sector_id=_id;
END;
$$
LANGUAGE plpgsql;

SELECT * FROM sp_sectors(1)



CREATE OR REPLACE FUNCTION sp_zonecoords()
    RETURNS TABLE(sector varchar, zone varchar, latitude double precision, longitude double precision) 
AS 
$$
BEGIN
	RETURN QUERY
    SELECT s.name as sector,z.name as zone, zc.latitude as latitude, zc.longitude as longitude
	FROM zones z
	INNER JOIN zonecoords zc ON z.id = zc.zone_id
	INNER JOIN sectors s ON z.sector_id = s.id ;
END;
$$
LANGUAGE plpgsql;

SELECT * FROM sp_zonecoords();




CREATE OR REPLACE FUNCTION sp_vehicleroutes()
    RETURNS TABLE(id bigint, date_route date, time_route time, vehicle varchar, 
				  route varchar, time_start time, time_end time, description text) 
AS 
$$
BEGIN
	RETURN QUERY
    SELECT vr.id as id, vr.date_route as date_route, vr.time_route as time_route,
	v.name as vehicle, r.name as route, s.time_start as time_start, s.time_end as time_end,
	vr.description as description
	FROM vehicleroutes vr
	INNER JOIN vehicles v ON vr.vehicle_id = v.id
	INNER JOIN routes r ON vr.route_id = r.id
	INNER JOIN schedules s ON vr.schedule_id = s.id;
END;
$$
LANGUAGE plpgsql;

SELECT * FROM sp_vehicleroutes();





CREATE OR REPLACE FUNCTION public.validate_date_within_activity_range(
	p_activityschedule_id bigint,
	p_date date)
    RETURNS boolean
    LANGUAGE 'plpgsql'
    COST 100
    VOLATILE PARALLEL UNSAFE
AS $BODY$
DECLARE
    v_activity_id BIGINT;
    v_start_date DATE;
    v_end_date DATE;
BEGIN
    -- Obtener el ID de la actividad desde activityschedules
    SELECT activity_id INTO v_activity_id
    FROM activityschedules
    WHERE id = p_activityschedule_id;

    -- Verificar si se encontr칩 el activity_id
    IF v_activity_id IS NULL THEN
        RAISE EXCEPTION 'ActivitySchedule no encontrado con ID %', p_activityschedule_id;
    END IF;

    -- Obtener las fechas de inicio y fin de la actividad
    SELECT date_start, date_end
    INTO v_start_date, v_end_date
    FROM activities
    WHERE id = v_activity_id;

    -- Verificar si la fecha proporcionada est치 dentro del rango de la actividad
    IF p_date >= v_start_date AND p_date <= v_end_date THEN
        RETURN TRUE;  -- La fecha est치 dentro del rango de la actividad
    ELSE
        RETURN FALSE;  -- La fecha no est치 dentro del rango de la actividad
    END IF;
END;
$BODY$;



CREATE OR REPLACE FUNCTION public.validate_schedule_overlap(
	p_day character varying,
	p_time_start time without time zone,
	p_time_end time without time zone)
    RETURNS boolean
    LANGUAGE 'plpgsql'
    COST 100
    VOLATILE PARALLEL UNSAFE
AS $BODY$
BEGIN
    -- Verificar si ya existe un horario que se solape con el nuevo horario
    IF EXISTS (
        SELECT 1
        FROM activityschedules
        WHERE day = p_day
          AND (
            -- Caso 1: El nuevo horario empieza dentro de un horario existente
            (p_time_start >= time_start AND p_time_start <= time_end)
            OR
            -- Caso 2: El nuevo horario termina dentro de un horario existente
            (p_time_end >= time_start AND p_time_end <= time_end)
          )
    ) THEN
        RETURN FALSE;  -- Existe un solapamiento
    END IF;

    -- Si no hay solapamiento, retornar TRUE
    RETURN TRUE;
END;
$BODY$;




CREATE OR REPLACE FUNCTION sp_userdrive(_id bigint)
    RETURNS TABLE(user_id bigint, name varchar) 
AS 
$$
BEGIN
	RETURN QUERY
    SELECT vo.user_id as user_id, us.name  
	FROM vehicleocuppants vo
	INNER JOIN users us ON vo.user_id = us.id
	WHERE vo.vehicle_id=_id AND vo.usertype_id=1;
END;
$$
LANGUAGE plpgsql;

Select * from sp_userdrive(1);